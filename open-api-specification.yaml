openapi: '3.0.1'
info:
  title: 'My API'

paths:
  /admin/lottery:
    post:
      x-amazon-apigateway-integration:
        credentials:
          Fn::GetAtt: [ApiGatewayAdminStepFunctionsRole, Arn]
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:states:action/StartExecution
        httpMethod: POST
        type: aws
        requestTemplates:
          application/json:
            Fn::Sub: |-
              {
                "stateMachineArn": "${AdminCreateLotteryStateMachine}"
              }
        responses:
          200:
            statusCode: 200
            responseTemplates:
              application/json: |
                { "executionId": "$input.json('executionArn').split(':').get(7)"}
          400:
            statusCode: 400
            responseTemplates:
              application/json: |
                {
                  "error": "$util.escapeJavaScript($input.json('$.Error'))"
                }
      responses:
        200:
          $ref: '#/components/responses/200Execution'
        404:
          $ref: '#/components/responses/Error'
  /admin/users:
    get:
      responses:
        '200':
          description: Successful response
      x-amazon-apigateway-integration:
        credentials: 
          Fn::GetAtt: [ ApiGatewayAdminStepFunctionsRole, Arn ]
        httpMethod: POST
        passthroughBehavior: when_no_match
        type: aws_proxy
        uri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AdminGetAllUsersFunction}/invocations
  /admin/users/{id}:
    get:
      responses:
        '200':
          description: Successful response
      x-amazon-apigateway-integration:
        credentials: 
          Fn::GetAtt: [ ApiGatewayAdminStepFunctionsRole, Arn ]
        httpMethod: POST
        passthroughBehavior: when_no_match
        type: aws_proxy
        uri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AdminGetUserByIdFunction}/invocations
    patch:
      x-amazon-apigateway-integration:
        credentials:
          Fn::GetAtt: [ ApiGatewayAdminStepFunctionsRole, Arn ]
        httpMethod: POST
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:states:action/StartExecution
        type: aws
        requestTemplates:
          application/json: 
            Fn::Sub: |-
              {
                "input": "{\"id\": \"$input.params('id')\", \"updateParams\": $util.escapeJavaScript($input.json('$'))}",
                "stateMachineArn": "${AdminUpdateUserStateMachine}"
              }
        responses:
          200:
            statusCode: 200
            responseTemplates:
              application/json: |
                { "executionId": "$input.json('executionArn').split(':').get(7)"}
          400:
            statusCode: 400
            responseTemplates:
              application/json: |
                {
                  "error": "$util.escapeJavaScript($input.json('$.Error'))"
                }
      responses:
        200:
          $ref: '#/components/responses/200Execution'
        404:
          $ref: '#/components/responses/Error'
    delete:
      x-amazon-apigateway-integration:
        credentials:
          Fn::GetAtt: [ApiGatewayAdminStepFunctionsRole, Arn]
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:states:action/StartExecution
        httpMethod: POST
        type: aws
        requestTemplates:
          application/json:
            Fn::Sub: |-
              {
                "input": "{\"id\": \"$input.params('id')\"}",
                "stateMachineArn": "${AdminDeleteUserStateMachine}"
              }
        responses:
          200:
            statusCode: 200
            responseTemplates:
              application/json: |
                { "executionId": "$input.json('executionArn').split(':').get(7)"}
          400:
            statusCode: 400
            responseTemplates:
              application/json: |
                {
                  "error": "$util.escapeJavaScript($input.json('$.Error'))"
                }
      responses:
        200:
          $ref: '#/components/responses/200Execution'
        404:
          $ref: '#/components/responses/Error'
  /auth/signup:
    post:
      requestBody:
        required: true
        content:
          application/json
      responses:
        '200':
          description: Successful response
      x-amazon-apigateway-integration:
        credentials: 
          Fn::GetAtt: [ ApiGatewayAuthInvokeRole, Arn ]
        httpMethod: POST
        passthroughBehavior: when_no_match
        type: aws_proxy
        uri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${UserRegistrationFunction}/invocations
  /auth/confirm:
    post:
      requestBody:
        required: true
        content:
          application/json
      responses:
        '200':
          description: Successful response
      x-amazon-apigateway-integration:
        credentials: 
          Fn::GetAtt: [ ApiGatewayAuthInvokeRole, Arn ]
        httpMethod: POST
        passthroughBehavior: when_no_match
        type: aws_proxy
        uri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${UserRegistrationConfirmationFunction}/invocations
  /public/lottery/winner:
    post:
      requestBody:
        required: true
        content:
          application/json
        responses:
          '200':
            description: Successful response
      x-amazon-apigateway-integration:
        credentials: 
          Fn::GetAtt: [ ApiGatewayAuthInvokeRole, Arn ]
        httpMethod: POST
        passthroughBehavior: when_no_match
        type: aws_proxy
        uri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${UserCheckWinnerFunction}/invocations

components:
  schemas:
    ExecutionCreated:
      title: Created execution
      type: object
      properties: 
        executionId:
          type: string
        required:
          - executionId
    Error:
      title: Error
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message

  responses:
    200Execution:
      description: Result response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ExecutionCreated'
    Error:
      description: Error response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'